**NOTE ******************************************************************************
All described apis have an implicit 'http://localhost:8000/meditrack' prepend
For example, get: /user/account/info in full is
get: http://localhost:8000/meditrack/user/account/info

All queries to the database require a query password for safety
The password should be as a dictionay key in the request body:

"query_pswd": "ae34ZF76!"

All apis function as a dictionary calls, request should be sent in json format as a dictionary


** API USES IN DIFFERENT ACTIONS ************************************************************
- user sign up
	- retrieve information from the fields
	- GET /user/security/questions for sample user security questions
	- POST /user/account

- user log in
	- either log in with email or phone number
	- confirm infromation using
	- GET /user/account/security

- user view account information
	- GET /user/account/info

- user update acccount information
	- GET /user/account/info
	- UPDATE user/account/info

- user update security information
	- UPDATE /user/account/security

- user reset password
	- GET /user/account/security
	- UPDATE user/account/security

- post a prescription
	- POST /precs 



- get a given prescription with rxno
	- GET /precs/info


- get all active prescriptions for user and their associated tracking information
	- GET /user/precs/active

- get all prescriptions for a user (for user history)
	- GET /user/precs/history

- get status progress steps for a prescription
	- GET /precs/info

- update the information of a prescription (name and strength (user_id and pharm_id nonchangeabe))
	- UPDATE /precs/info

- update the status of a prescription
	- UPDATE /precs/progress

	- requires the rxno of prescription
	- optional pharm_id (just to confirm that the pharmacy updating is the appropriate one for prescription)
	- requires the status number to be provided.
	- status message is optional
	- 

- user pick up prescription
	- user completes a prescription pick up

- delete a prescription
	- DELETE /precs


- pharm sign up
	- retrieve information from the fields
	- GET /security/questions for sample user security questions
	- POST /pharm/account

- pharm log in
	- either log in with email or phone number
	- confirm infromation using
	- GET /pharm/account/security

- pharm view account information
	- GET /pharm/account/info

- pharm update acccount information
	- GET /pharm/account/info
	- UPDATE pharm/account/info

- pharm update security information
	- UPDATE /pharm/account/security

- pharm reset password
	- GET /pharm/account/security
	- UPDATE pharm/account/security

- pharm view patients
	- obtains the list of patients the pharmacy is servicing
	- GET /pharm/patients

- pharm view a patient information
	- see all the prescriptions that the pharmacy is currently serving
	- GET /pharm/patient/precs





** DESCRIPTION OF IMPLEMENTED BACKEND APIS ******************************************************
{
	HTTP_CALL path_name (parameters, required_parameters*)
	parameter names are the keys in the request body dictionary
	Output:
	<outputs>
}

{
	GET /user/account/info ((user_id or email or phone_no)*)
	Ouput:
	Dictionary with the following keys for information
		- user_id
		- first_name
		- last_name
		- email
		- phone_no
		- healthcard_no
		- street_address
		- city
		- postal_code
}

{
	GET /user/account/security ((user_id or email or phone_no)*)
	Ouput:
	Dictionary with the following keys for information
		- user_id
		- first_name
		- last_name
		- email
		- phone_no
		- password
		- sec_quest_1
		- sec_quest_2
		- sec_quest_3
		- sec_ans_1
		- sec_ans_2
		- sec_ans_3
}

{
	POST /user/account (
		first_name*,
		last_name*,
		(email or phone_no)*,
		password*,
		street_address, city, postal_code,
		healthcard_no,
		sec_quest_1, sec_quest_2, sec_quest_3,
		sec_ans_1, sec_ans_2, sec_ans_3
	)
	Outputs:
	Returns the information in a dictionary with the following keys:
		- user_id
		- first_name
		- last_name
		- email
		- phone_no
		- precs_active (json array of rx#s of active prescriptions)
		- precs_history (json array of rx#s of prescription history)
}

{
	GET /security/questions ()
	Output:
	Returns a json array of security question samples.
}

{
	PUT /user/account/info (
		user_id*,
		email,
		phone_no,
		first_name,
		last_name,
		email,
		phone_no,
		healthcard_no,
		street_address,
		city,
		postal_code,
	)
	//parameters should be the fields that need to be updated
	//updates the user account information (not security information)
	Outputs:
	Returns a dictionary:
		- user_id
		- update_status (0 for failure, 1 for success);
		- update_msg (a string )
}

{
	PUT /user/account/security (
		user_id*,
		password,
		sec_quest_1,
		sec_quest_2,
		sec_quest_3,
		sec_ans_1,
		sec_ans_2,
		sec_ans_3
	)
	Outputs:
	Returns a dictionary:
		- user_id
		- update_status (0 for failure, 1 for success);
		- update_msg (a string )
} 

{
	POST /precs (
		rx*,
		user_id*,
		pharm_id*,
		status_date*,
		med_name,
		med_strength,
		status_msg
	)
	//posts a prescription to the database adding to pharm and users active prescriptions
	//also adds user to pharm active prescriptions if not already present
	//returns prescription dictionary
		- 
}

{
	GET /precs/info (rx*)

	//returns a dictionary of the format:
	{
		rx: 1234,
		med_name: Acetone,
		med_strength: High,

		user: {
			user_id:
			first_name:
			last_name:
			emai:
			phone_no:
		},

		pharmacy: {
			pharm_id:
			name: Big Pharma,
			address: King Avenue,
			phone_no:
			email:
		},

		progress: 2 //number out of 5 for stage in pharmacy, 6 if not used
		progress_msg: "Received"
		status_msg: "nothign yet!"
		status_date: 09002-3940-833
		is_completed: 0 (0 for not completed, 1 for completed)
	}
}

{
	GET /user/precs/active/ (user_id*)

	returns an array of currently active (being tracked) prescription dictionaries
	in the format of the dictionary above.
}

{
	GET /user/precs/history/ (user_id*)

	returns an array of all prescriptions tracked in the form of dictionaries
	in the format of the dictionary above.
}

{
	PUT /precs/progress (
		rx*,
		progress*, //number out of 5 for stage in pharmacy, 6 if not used
		status_msg, //specific message from pharmacy
		status_date*,
	)
}

//***************UNCOMPLETED APIS **********************************
